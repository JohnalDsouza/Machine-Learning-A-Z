# -*- coding: utf-8 -*-
"""Copy of simple_linear_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18vwkIZL5MYVpTb1z1hErYvxGB1GstZAv

# Simple Linear Regression

## Importing the libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""## Importing the dataset"""

dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:,:-1].values 
y = dataset.iloc[:,-1].values

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state =0)

"""## Training the Simple Linear Regression model on the Training set"""

# Create an instance of the LinearRegression class and fit the training data to the model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = regressor.predict(X_test)

score = regressor.score(X_test, y_test) # evaluate performance
print('R-squared score:', score)

"""## Visualising the Training set results"""

plt.scatter(X_train, y_train, color = 'red') # scatter plots the real points
# here we use regressor.predict(X_test) because we want to predict the salary of training set
# to plot a curve of a function, in this case curve
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('Salary vs Experiences (Training set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()

"""## Visualising the Test set results"""

plt.scatter(X_test, y_test, color = 'red') 
# here we do not need to replace anything as regression line is resulting from
# a unique equation therefore the predicted salary of train set is the same as
# test set
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
#use this too same answer plt.plot(X_test, y_pred, color = 'blue')
plt.title('Salary vs Experiences (Test set)')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.show()